#include "arduino.ceu"
#include "cube.ceu"

#define BPIN1 _A0
#define BPIN2 _A1
#define BPIN3 _A2
#define BPIN4 _A3
#define SPEED 800

native do
	int path[COLS*SIZE][2];
end

class Snake with
	var Cube& cub;
	function(void) => int getHead;
	function(void) => int getTail;
	function(void) => int getLen;
	function(void) => void grow;
do
	var int head = 1;
	var int tail = 0;
	var int len = 1;
	var int dir = 1;
	var int plane = -1;
	var int col = 2;

	var bool isDown1 = false;
	var bool isDown2 = false;
	var bool isDown3 = false;
	var bool isDown4 = false;
	function(int dirB1, int dirB2, int dirB3, int dirB4)=>void setDir do
		if _analogRead(BPIN1) > 900 and not isDown1 then
			isDown1 = true;
			dir = dirB1;
		end

		if _analogRead(BPIN2) > 900 and not isDown2 then
			isDown2 = true;
			dir = dirB2;
		end

		if _analogRead(BPIN3) > 900 and not isDown3 then
			isDown3 = true;
			dir = dirB3;
		end

		if _analogRead(BPIN4) > 900 and not isDown4 then
			isDown4 = true;
			dir = dirB4;
		end
	end

	function(void)=>int getHead do
		return head;
	end
	function(void)=> int getTail do
		return tail;
	end
	
	function(void)=>int getLen do
		return len;	
	end

	function(void)=>void grow do
		len = len + 1;
		if tail == 0 then
			tail = SIZE*COLS-1;
		else
			tail = tail - 1;
		end
	end

	function (void)=>void move do
		if head == COLS*SIZE-1 then
			head = 0;
		else
			head = head + 1;	
		end

		if tail == COLS*SIZE-1 then
			tail = 0;
		else
			tail = tail + 1;
		end

        #define WALL0 col>COLS-1-SIZE
        #define WALL1 plane>=SIZE-1
        #define WALL2 col<SIZE
        #define WALL3 plane<1
        #define WALL4 col%SIZE==SIZE-1
        #define WALL5 col%SIZE==0
        
		if dir == 0 then
			if WALL0 then
				//*col = *col - (COLS - SIZE);
                if WALL4 then
                    dir = 5;
                    col = col - 1;
                else
				    dir = 4;
                    col = col + 1;
                end
			else
				col = col + 3;
			end
		else/if dir == 1 then
			if WALL1 then
				//*plane = 0;
				if WALL4 then
                    dir = 5;
                    col = col - 1;
                else
				    dir = 4;
                    col = col + 1;
                end
			else
				plane = plane + 1;
			end
		else/if dir == 2 then
			if WALL2 then
				//*col = *col+(SIZE-1)*3;
                if WALL5 then
                    dir = 4;
                    col = col + 1;
                else
				    dir = 5;
                    col = col - 1;
                end
			else
				col = col - 3;
			end
		else/if dir == 3 then
			if WALL3 then
				//*plane = SIZE -1;
                if WALL0 then
                    dir = 2;
                    col = col - 3;
                else
				    dir = 0;
                    col = col + 3;
                end
			else
				plane = plane - 1;
			end
		else/if dir == 4 then
			if WALL4 then
				//*col = *col - (SIZE - 1);
                if WALL2 then
                    dir = 0;
                    col = col + 3;
                else
				    dir = 2;
                    col = col - 3;
                end
			else
				col = col + 1;
			end
		else/if WALL5 then
			//*col = *col + (SIZE-1);
            if WALL0 then
                dir = 2;
                col = col - 3;
            else
                dir = 0;
                col = col + 3;
            end
		else
			col = col -1;
		end
	end

	par do
		loop do
			move();
		
			_path[head][0] = plane;
			_path[head][1] = col;
			
			loop i in len do
				cub.set(_path[(tail+1+i)%(SIZE*COLS)][0], _path[(tail+1+i)%(SIZE*COLS)][1], 1);
			end
			
			cub.set(_path[tail][0], _path[tail][1], 0);

			await (SPEED)ms;
		end
	with
		loop do
			if dir == 0 then
				setDir(4, 3, 1, 5);
			else/if dir == 1 then
				setDir(5, 2, 0, 4);
			else/if dir == 2 then
				setDir(5, 3, 1, 4);
			else/if dir == 3 then
				setDir(5, 2, 0, 4);
			else/if dir == 4 then
				setDir(2, 3, 1, 0);
			else
				setDir(0, 3, 1, 2);
			end

			if _analogRead(BPIN1) < 900 then
				isDown1 = false;
			end		
			if _analogRead(BPIN2) < 900 then
				isDown2 = false;
			end
			if _analogRead(BPIN3) < 900 then
				isDown3 = false;
			end
			if _analogRead(BPIN4) < 900 then
				isDown4 = false;
			end

			await 40ms;
		end
	end
end

