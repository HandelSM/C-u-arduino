#include "arduino.ceu"
#include "cube.ceu"
#define BPIN1 _A0
#define BPIN2 _A1
#define BPIN3 _A2
#define BPIN4 _A3

native do
	int path[COLS*SIZE][2];
end

var int dir = 0;

function @rec (int&& plane,int&& col)=>void checkColsPlanes do
	if dir == 0 then
        if *col>COLS-1-SIZE then
            //*col = *col - (COLS - SIZE);
            dir = 4;
            call/rec checkColsPlanes(plane, col);
        else
            *col = *col + 3;
        end
    else/if dir == 1 then
        if *plane >= SIZE - 1 then
            //*plane = 0;
            dir = 4;
            call/rec checkColsPlanes(plane, col);
        else
            *plane = *plane + 1;
        end
    else/if dir == 2 then
        if *col < SIZE then
            //*col = *col+(SIZE-1)*3;
            dir = 5;
            call/rec checkColsPlanes(plane, col);
        else
            *col = *col - 3;
        end
    else/if dir == 3 then
        if *plane < 1 then
            //*plane = SIZE -1;
            dir = 0;
            call/rec checkColsPlanes(plane, col);
        else
            *plane = *plane - 1;
        end
    else/if dir == 4 then
        if *col%SIZE==SIZE-1 then
            //*col = *col - (SIZE - 1);
            dir = 2;
            call/rec checkColsPlanes(plane, col);
        else
            *col = *col + 1;
        end
    else/if *col%SIZE == 0 then
        //*col = *col + (SIZE-1);
        dir = 0;
        call/rec checkColsPlanes(plane, col);
    else
        *col = *col -1;
    end
end

var int head = 0;
function @rec (int&& p, int && c) =>void newFood do
	var int possibleCol = _random(COLS);
	var int possiblePlane = _random(SIZE);

	if possibleCol != _path[head][1] or possiblePlane != _path[head][0] then
		*c = _random(COLS);
		*p = _random(SIZE);
	else
		call/rec newFood(p, c);
	end
end

var int itemC;
var int itemP;
call/rec newFood(&&itemP, &&itemC);

function(int&& plane, int&& col)=>bool comeu do
	if *plane == itemP and *col == itemC then
		return true;
	else
		return false;
	end
end

var int len = 1;
var int tail = 0;
var bool isDown1 = false;
var bool isDown2 = false;
var bool isDown3 = false;
var bool isDown4 = false;
function(int dirB1, int dirB2, int dirB3, int dirB4)=>void setDir do
	if _analogRead(BPIN1) > 900 and not isDown1 then
		isDown1 = true;
		dir = dirB1;
	end

	if _analogRead(BPIN2) > 900 and not isDown2 then
		isDown2 = true;
		dir = dirB2;
	end

	if _analogRead(BPIN3) > 900 and not isDown3 then
		isDown3 = true;
		dir = dirB3;
	end

	if _analogRead(BPIN4) > 900 and not isDown4 then
		isDown4 = true;
		dir = dirB4;
	end
end

//_Serial.begin(9600);

var Cube cube;

par do
	var int plane = 0;
	var int col = 0;
	loop do
		
		cube.set(_path[tail][0], _path[tail][1], 0);
		call/rec checkColsPlanes(&&plane, &&col);
		
		_path[tail][0] = plane;	
		_path[tail][1] = col;
		head = tail;

		if tail == 0 then
			tail = len-1;
		else
			tail = tail-1;
		end

		loop i in len do
			cube.set(_path[(head+i)%len][0], _path[(head+i)%len][1], 1);
		end

		if comeu(&&_path[head][0], &&_path[head][1]) then
			len = len + 1;
			call/rec newFood(&&itemP, &&itemC);
		end
		
		await 800ms;
	end
with
	loop do
		if dir == 0 then
			setDir(4, 3, 1, 5);
		else/if dir == 1 then
			setDir(5, 2, 0, 4);
		else/if dir == 2 then
			setDir(5, 3, 1, 4);
		else/if dir == 3 then
			setDir(5, 2, 0, 4);
		else/if dir == 4 then
			setDir(2, 3, 1, 0);
		else
			setDir(0, 3, 1, 2);
		end
	
		if _analogRead(BPIN1) < 900 then
			isDown1 = false;
		end		
		if _analogRead(BPIN2) < 900 then
			isDown2 = false;
		end
		if _analogRead(BPIN3) < 900 then
			isDown3 = false;
		end
		if _analogRead(BPIN4) < 900 then
			isDown4 = false;
		end

		await 40ms;
	end
with
	loop do
		cube.set(itemP, itemC, 1);
		await 300ms;
		cube.set(itemP, itemC, 0);
		await 300ms;
	end
end
