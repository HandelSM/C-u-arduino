class Food with
	var Cube& cub;
	var int h;
	var int p;
	var int c;
	function(void) => int getPlane;
	function(void) => int getCol;
do
	function(void) => int getPlane do
		return p;
	end
	
	function(void) => int getCol do
		return c;
	end

	loop do
		cub.set(p,c,1);
		await 300ms;
		cub.set(p,c,0);
		await 300ms;
	end
end

class Eat with
	var Snake& s;
	var int p;
	var int c;
do
	loop do
		if _path[s.getHead()][0] == p and _path[s.getHead()][1] == c then
			s.grow();
			s.cub.set(p,c,1);
			escape 0;
		else
			await (SPEED)ms;
		end
	end
end

function (int x) => int mod do
	if x>0 then
		return x;
	end
	return -x;
end

function (int p1, int c1, int p2, int c2) => int dist do
	var int distCol;
	distCol = mod(c2 - c1);
	distCol = distCol%SIZE+distCol/SIZE;
	return mod(p2-p1)+distCol;
end

function @rec (int&& p, int&& c, int h) => void newFood do
	var int pH = _random(SIZE);
	var int pC = _random(SIZE);
	if dist(pH, pC,_path[h][0], _path[h][1]) > 2 then
		*p = pH;
		*c = pC;
	else
		call/rec newFood(p, c, h);	
	end
end

